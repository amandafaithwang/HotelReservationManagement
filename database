import sqlite3

"This code allows the user to interact through the console as it displays a menu and asks for user input to perform various operations like adding rooms, adding bookings, etc."


def create_database():  # this function creates the database if it does not exist already
    connection = sqlite3.connect('hotel_data.db')  # this is the name of the database
    cursor = connection.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS Rooms (
                        room_id INTEGER PRIMARY KEY,
                        room_type TEXT,
                        capacity INTEGER,
                        parking_available TEXT
                    )''')  # table for rooms

    # Check if the rooms table is empty
    cursor.execute("SELECT COUNT(*) FROM rooms")
    count = cursor.fetchone()[0]

    if count == 0:
        # Predefined rooms
        rooms_data = [
            (101, 'Double-double', 4, 'Yes'),
            (102, 'Double-double', 4, 'Yes'),
            (103, 'Double-double', 4, 'Yes'),
            (104, 'Double-double', 4, 'Yes'),
            (105, 'Double-double', 4, 'Yes'),
            (106, 'Double-double', 4, 'Yes'),
            (107, 'Double-double', 4, 'Yes'),
            (108, 'Double-double', 4, 'Yes'),
            (109, 'Double-double', 4, 'Yes'),
            (110, 'Double-double', 4, 'Yes'),
            (111, 'Double-double', 4, 'Yes'),
            (112, 'Double-double', 4, 'Yes'),
            (113, 'Double-double', 4, 'Yes'),
            (114, 'Double-double', 4, 'Yes'),
            (115, 'Double-double', 4, 'Yes'),
            (116, 'Double-double', 4, 'Yes'),
            (117, 'Double-double', 4, 'Yes'),
            (118, 'Double-double', 4, 'Yes'),
            (119, 'Double-double', 4, 'Yes'),
            (120, 'Double-double', 4, 'Yes'),
            (121, 'Double-double', 4, 'Yes'),
            (122, 'Double-double', 4, 'Yes'),
            (123, 'Double-double', 4, 'Yes'),
            (124, 'Double-double', 4, 'Yes'),
            (125, 'Double-double', 4, 'Yes'),
            (126, 'Double-double', 4, 'Yes'),
            (127, 'Double-double', 4, 'Yes'),
            (128, 'Double-double', 4, 'Yes'),
            (129, 'Double-double', 4, 'Yes'),
            (130, 'Double-double', 4, 'Yes'),
            (131, 'Double-double', 4, 'Yes'),
            (132, 'Double-double', 4, 'Yes'),
            (133, 'Double-double', 4, 'Yes'),
            (134, 'Double-double', 4, 'Yes'),
            (135, 'Double-double', 4, 'Yes'),
            (136, 'Double-double', 4, 'Yes'),
            (137, 'Double-double', 4, 'Yes'),
            (138, 'Double-double', 4, 'Yes'),
            (139, 'Double-double', 4, 'Yes'),
            (140, 'Double-double', 4, 'Yes'),
            (141, 'Queen', 2, 'Yes'),
            (142, 'Queen', 2, 'Yes'),
            (143, 'Queen', 2, 'Yes'),
            (144, 'Queen', 2, 'Yes'),
            (145, 'Queen', 2, 'Yes'),
            (146, 'Queen', 2, 'Yes'),
            (147, 'Queen', 2, 'Yes'),
            (148, 'Queen', 2, 'Yes'),
            (149, 'Queen', 2, 'Yes'),
            (150, 'Queen', 2, 'Yes'),
            (151, 'Queen', 2, 'Yes'),
            (152, 'Queen', 2, 'Yes'),
            (153, 'Queen', 2, 'Yes'),
            (154, 'Queen', 2, 'Yes'),
            (155, 'Queen', 2, 'Yes'),
            (156, 'Queen', 2, 'Yes'),
            (157, 'Queen', 2, 'Yes'),
            (158, 'Queen', 2, 'Yes'),
            (159, 'Queen', 2, 'Yes'),
            (160, 'Queen', 2, 'Yes'),
            (161, 'Queen', 2, 'Yes'),
            (162, 'Queen', 2, 'Yes'),
            (163, 'Queen', 2, 'Yes'),
            (164, 'Queen', 2, 'Yes'),
            (165, 'Queen', 2, 'Yes'),
            (166, 'Queen', 2, 'Yes'),
            (167, 'Queen', 2, 'Yes'),
            (168, 'Queen', 2, 'Yes'),
            (169, 'Queen', 2, 'Yes'),
            (170, 'Queen', 2, 'Yes'),
            (171, 'King', 2, 'Yes'),
            (172, 'King', 2, 'Yes'),
            (173, 'King', 2, 'Yes'),
            (174, 'King', 2, 'Yes'),
            (175, 'King', 2, 'Yes'),
            (176, 'King', 2, 'Yes'),
            (177, 'King', 2, 'Yes'),
            (178, 'King', 2, 'Yes'),
            (179, 'King', 2, 'Yes'),
            (180, 'King', 2, 'Yes'),
            (181, 'King', 2, 'Yes'),
            (182, 'King', 2, 'Yes'),
            (183, 'King', 2, 'Yes'),
            (184, 'King', 2, 'Yes'),
            (185, 'King', 2, 'Yes'),
            (186, 'King', 2, 'Yes'),
            (187, 'King', 2, 'Yes'),
            (188, 'King', 2, 'Yes'),
            (189, 'King', 2, 'Yes'),
            (190, 'King', 2, 'Yes'),
            (191, 'Suite', 4, 'Yes'),
            (192, 'Suite', 4, 'Yes'),
            (193, 'Suite', 4, 'Yes'),
            (194, 'Suite', 4, 'Yes'),
            (195, 'Suite', 4, 'Yes'),
            (196, 'Suite', 4, 'Yes'),
            (197, 'Suite', 4, 'Yes'),
            (198, 'Suite', 4, 'Yes'),
            (199, 'Suite', 4, 'Yes'),
            (200, 'Suite', 4, 'Yes')
        ]

        "executemany() will execute the SQL command for each tuple in the rooms_data list, which is what you want when inserting multiple rows of data."
        cursor.executemany('''INSERT INTO rooms (room_id, room_type, capacity, parking_available)
                        VALUES (?, ?, ?, ?)''', rooms_data)  # inserting the predefined rooms into the table

    connection.commit()
    connection.close()


def add_booking():
    """This function prompts the user to input details about a booking (such as room ID, number of adults, number of children, etc.)to the database"""
    room_id = int(input("Enter room ID: "))
    no_of_adults = int(input("Enter number of adults: "))
    no_of_children = int(input("Enter number of children: "))
    weekend_nights = int(input("Enter number of weekend nights: "))
    week_nights = int(input("Enter number of week nights: "))
    meal_plan = input("Enter type of meal plan: ")
    car_parking_required = int(input("Does the customer require car parking? (0 - No, 1 - Yes): "))
    lead_time = int(input("Enter lead time (days): "))
    arrival_year = int(input("Enter arrival year: "))
    arrival_month = int(input("Enter arrival month: "))
    arrival_date = int(input("Enter arrival date: "))
    market_segment = input("Enter market segment: ")
    repeated_guest = int(input("Is the customer a repeated guest? (0 - No, 1 - Yes): "))
    previous_cancellations = int(input("Enter number of previous cancellations: "))
    previous_bookings_not_canceled = int(input("Enter number of previous bookings not canceled: "))
    avg_price_per_room = float(input("Enter average price per room: "))
    special_requests = int(input("Enter number of special requests: "))
    booking_status = input("Enter booking status: ")

    connection = sqlite3.connect('hotel_data.db')
    cursor = connection.cursor()
    cursor.execute('''INSERT INTO bookings (room_id, no_of_adults, no_of_children, weekend_nights, 
                      week_nights, meal_plan, car_parking_required, lead_time, arrival_year, 
                      arrival_month, arrival_date, market_segment, repeated_guest, 
                      previous_cancellations, previous_bookings_not_canceled, avg_price_per_room, 
                      special_requests, booking_status) 
                      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                   (room_id, no_of_adults, no_of_children, weekend_nights, week_nights, meal_plan,
                    car_parking_required, lead_time, arrival_year, arrival_month, arrival_date,
                    market_segment, repeated_guest, previous_cancellations,
                    previous_bookings_not_canceled, avg_price_per_room, special_requests, booking_status))
    connection.commit()
    connection.close()


def list_all_rooms():
    """This function retrieves all room details from the rooms table and prints them out."""
    connection = sqlite3.connect('hotel_data.db')
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM rooms")
    rooms = cursor.fetchall()
    connection.close()

    if not rooms:
        print("No rooms available.")
    else:
        for room in rooms:
            print("Room ID:", room[0])
            print("Room Type:", room[1])
            print("Capacity:", room[2])
            print("Parking Available:", "Yes" if room[3] else "No")
            print()


def list_all_bookings():
    """This function retrieves all booking details from the bookings table and prints them out"""
    connection = sqlite3.connect('hotel_data.db')
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM bookings")
    bookings = cursor.fetchall()
    connection.close()

    if not bookings:
        print("No bookings available.")
    else:
        for booking in bookings:
            print("Booking ID:", booking[0])
            print("Room ID:", booking[1])
            print("No. of Adults:", booking[2])
            print("No. of Children:", booking[3])
            print("Weekend Nights:", booking[4])
            print("Week Nights:", booking[5])
            print("Meal Plan:", booking[6])
            print("Car Parking Required:", "Yes" if booking[7] else "No")
            print("Lead Time:", booking[8])
            print("Arrival Year:", booking[9])
            print("Arrival Month:", booking[10])
            print("Arrival Date:", booking[11])
            print("Market Segment:", booking[12])
            print("Repeated Guest:", "Yes" if booking[13] else "No")
            print("Previous Cancellations:", booking[14])
            print("Previous Bookings Not Canceled:", booking[15])
            print("Avg Price Per Room:", booking[16])
            print("Special Requests:", booking[17])
            print("Booking Status:", booking[18])
            print()


if __name__ == "__main__":
    create_database()

    while True:
        print("1. Add a booking")
        print("2. List all rooms")
        print("3. List all bookings")
        print("4. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            add_booking()
        elif choice == '2':
            list_all_rooms()
        elif choice == '3':
            list_all_bookings()
        elif choice == '4':
            break
        else:
            print("Invalid choice. Please try again.")
